#! /usr/bin/env bash

: <<=cut
=pod

=head1  NAME

ezid - Get, Add, Update, and delete ARKS via the EZID api

=head1 SYNOPSIS

  ezid [-S|--session=<httpie session>] [-b|--base=<base>] \
  [-n|--dry-run] [-p|--print] [-h|--help]\
  <command> [<args>]

  where <command> is one of fq, anvl, args_to_anvl, array_to_anvl, login, get, mint, put, update, delete

Ezid is a script that simplifies the retrieval, creation and update of ezid
ARKS. Ezid uses as set of functions to communicate with the ezid services. Ezid
uses a few other tools to perform the functions. L</"COMMANDS"> is summary of
the commands that are available.

A good review of the format and organization of an B<ark:> can be found in the
L<ID Concepts|https://ezid.cdlib.org/learn/id_concepts> description.

=head1 GLOBAL OPTIONS

=over 4

=item B<-S|--session|--http_session=I<http_session>>

Set the HTTPIE session variable. This allows you to maintain multiple
authentication setups for your EZID, so that you can go back and forth between
users. This is equivalent to the L<httpie|https://httpie.org/> session variable,
and are shared with that command. Sessions primarily keep the basic
authentication parameters saved.  By default the B<ezid> session is used.

=item B<-s |--base=I<base>>

Set the base that you want to use. The base is a combination of the scheme,NAAN,
and shoulder components of the identifier. The default base is the EZID ark
testing shoulder B<ark:/99999/fk4>. This is a safe place to do your testing. If
you are using complete arks in your commands, this is not required, but if you
are using shorthands, for example only using the blades of the arks, then the
fully qualified arks are created from this base.

=item B<-n|--dry-run>

Show what you would do do not really do it. Because some commands require
multiple access to the server, this command does not always work properly :(.

=item B<--print|http_print>

Adjust httpie I<--print=> argument.  By default only the response body
I<--print=b> is shown.

=item B<-h|--help>

Shows the manpage for the program. The help pages are embedded in the script and
require the functions, C<pod2usage> and C<pod2text> to work properly.

=back

=cut

function init() {
    local opts=`getopt -o nh --long session:,base:,print:,http_print:,http_session:,help -n 'ezid' -- "$@"`
    if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    while true; do
	    case $1 in
	      --session | --http_session) EZID[http_session]=$2;  shift 2;;
	      --base) BASE[in]=$2;  shift 2;;
	      -n | --dry-run) EZID[noop]=1; shift ;;
	      --print | --http_print) EZID[http_print]=$2; shift 2;;
        -h | --help ) exec pod2text $0;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

    parse_base;
}

: <<='cut'
=pod

=head1 COMMANDS

There are a number of ezid commands that are used in manipulating the
ARKS.  There are metadata commands to edit and create the required
inputs, and there are commands to retrieve, create, and update records
as well.

There are some informational commands that do not access the CDL server.

C<ezid [--base=base] fq ark> will parse an ark, and either verify it, or expand
it to a full ark if it is only a shoulder. See L</"FQ"> for more information.

C<ezid anvl [--array] [--csv=items]> Will read anvl formatted data from C<stdin>
and output it either as a bash array, or as a csv row.  See L</"ANVL"> for more information.

C<ezid args_to_anvl [key:value] [key2:anvl2]> will read passed key:value pairs
from the commandline and output anvl format to C<stdout>.  See L</"ARGS_TO_ANVL"> for more information.

C<ezid array_to_anvl `declare -p bash_array`> will read the first parameter as
serialized bash array, and parse that as anvl.  See L</"ARRAY_TO_ANVL"> for more information.

Next there are a set of commands that communicate with the CDL service. Note,
that ezid uses L<httpie|https://httpie.org/> for its http communcation. This
allows users to combine ezid with other httpie requests if required. Login
infomation is stored using the standard C<httpie> methodology, see L</"GLOBAL
OPTIONS"> for httpid options.

C<ezid [options] get [--array] [--csv=list] ark(s)> retrieves ARKs from the ezid
server. Can output in multiple formats.  See L</"GET"> for more information.

C<ezid [--session=http_session] login --auth=user[:password] > Allows users to
set and save their login parameters for further updates. See L</"LOGIN"> for more information.

C<ezid [global_options] mint [--proxy=proxy_server] [key:value] [key2:value2]
...> will mint a new ark in the specified C<--base>.  See L</"MINT"> for more information.

C<ezid [global_options] update ark [key:value] [key2:value2] ...> updates an
existing ark with the passed key:value pairs.  See L</"UPDATE"> for more information.

C<ezid [global_options delete ark(s)>: Deletes ARKS if current status is
C<_status:reserved>. See L</"DELETE"> for more information.

=cut

function main.cmd () {
    cmd=$1
    shift;
    case $cmd in
      put )
        create "$@"
        ;;
      post )
        mint "$@"
        ;;
	    to_csv | login | get | delete | post | mint | update | push | fq | anvl | args_to_anvl | array_to_anvl ) # http requests
	      $cmd "$@";
	      ;;
      declare ) # informational requests
        _${cmd} "$@";
        ;;
	    OPTIONS )	# http requests
	      $cmd $@;
	      ;;
	    *)
	      exec pod2usage $0
	  ;;
    esac
}


function log() {
  (>&2 echo LOG: $@)
}

function err() {
  local n=1;
  if [[ $1 = '--quiet' ]] ; then
    n=$2;
  else
    n=$1
    shift
    (>&2 echo err: $@)
  fi
  exit $n;
}

: <<=cut

=head2 FQ

  ezid <--base=> fq [ark]

C<ezid fq> will output the fully qualified C<ark:>.  This will combine
the C<base> specifiation with the passed ark or ark:fragment, and
guess at the fully qualified version.  Note that the C<--base> is an
c<ezid> parameter, and not an option of this function.  Currently,
this function does NOT use the parity check that is part of the ark:
specification.

  # verify an ark:
  ezid --session=ucd-legacy login --auth=ucd-legacy

After which the session C<ucd-legacy>

=cut

function fq() {
  local v
  local blade
  if [[ $1 =~ ^((ark:/)([0-9][0-9][0-9][0-9][0-9]/)([a-z]+[0-9]))?([a-z]*[0-9])([a-z,0-9]*)([a-z,0-9])(/.*)?$ ]]; then
#    log MATCH $(declare -p BASH_REMATCH)
    v=${BASH_REMATCH[2]};
    ARK[scheme]=${v:-${BASE[scheme]}}
    ARK[scheme]=${BASE[scheme]}
    v=${BASH_REMATCH[3]};
    ARK[naan]=${v:-${BASE[naan]}}

    if [[ -n ${BASH_REMATCH[4]} ]]; then
      ARK[shoulder]=${BASH_REMATCH[4]};
      ARK[blade]=${BASH_REMATCH[5]}${BASH_REMATCH[6]}
    elif [[ ${BASH_REMATCH[5]} == ${BASE[shoulder]} ]]; then
      ARK[shoulder]=${BASE[shoulder]};
      ARK[blade]=${BASH_REMATCH[6]};
    else
      ARK[shoulder]=${BASE[shoulder]};
      ARK[blade]=${BASH_REMATCH[5]}${BASH_REMATCH[6]}
    fi

    ARK[tip]=${BASH_REMATCH[7]};
    ARK[extension]=${BASH_REMATCH[8]};

    ARK[fq]=${ARK[scheme]}${ARK[naan]}${ARK[shoulder]}${ARK[blade]}${ARK[tip]}
    echo ${ARK[fq]}
  else
    log ARK: $1 invalid
    exit 1;
  fi
}


: <<=cut
=head2 ANVL

   ezid anvl [--array] [--csv=I<columns>] [--header] ARK(s)

C<ezid anvl> reads ANVL formatted data from C<stdin> and reformats it
into either a bash associative array, or row of CSV data, outputing it
to C<stdout>.  If you do not set either C<--array> or C<--csv>, then
the function will not output any data, but can still be used to test
the validity of the input ANVL data.

  # This example converts a simple ANVL file to a bash array
  $ echo -e "erc.who: Quinn\nerc.what: Eskimo" | ./ezid anvl --array

  # OUT declare -A anvl=([erc.what]="Eskimo" [erc.who]="Quinn" )

  # Here we write a CSV row, with a specified ark
  $ echo -e "erc.who: Quinn\nerc.what: Eskimo" | ./ezid anvl --ark=ark://99999/fk4foo --csv=ark:erc.what

  # OUT ark://99999/fk4foo,Eskimo

  # This tests the goodness of your ANVL data.
 echo -e "erc.who Quinn\nerc.what: Eskimo" | ./ezid anvl --array && echo "GOOD" || echo "BAD"
  #err: unknown erc.who Quinn
  #BAD

The anvl function is used internally to parse the data retrieved from
any get commands, and the C<get> options just cascade to this
function.

=head3 ANVL OPTIONS

=over 4

=item B<--array>

This will output a bash style associative array from a given ARK, where each key
of the array is a key of the retrieved ANVL format. these can be C<eval>ed for
use later in a bash script.

=item B<--csv=I<columns>>

You can specify the columns that you would like to retrieve using this
parameter. Somewhat following anvl conventions, the column names are B<:>
delimited. This is a convenient way to create a table from a list of ARKs.

=item B<--ark>

You can specify and ark to be associated with the input avnl
data. This is a convenience primarily with the C<--csv> parameter, so
that you can easily include an ark in CSV file output.  Note that if
the ANVL input also specifies an C<ark:> parameter, then that takes
precedence.

=back

=cut

function anvl() {
  local opts=`getopt -o Ac:a: --long array,csv:,ark: -n 'ezid anvl' -- "$@"`

  if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi
  eval set -- "$opts"

  local array;
  local ark;
  while true; do
	  case $1 in
      -A | --array ) array=1; shift;;
      -a | --ark ) ark=$2; shift 2;;
      -c | --csv )
        IFS=':' read -r -a csv <<< "$2"
        shift 2;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  declare -A anvl
  local cont='^[ \t]+(.*)';
  local nv='^([^:]+)[ \t]*:[ \t]*(.*)$'
  local n
  local v
  while IFS='' read -r line || [[ -n "$line" ]] ; do
    if [[ $line =~ ^# ]]; then
      true
    elif [[ $line =~ $cont ]]; then
      line=${BASH_REMATCH[1]}
      if [[ -n $n ]]; then
        v+=" $line";
      else
        err 1 'Bad continuation: $line'
      fi
    elif [[ $line =~ $nv ]]; then
      if [[ -n $n ]]; then
        anvl[$n]=$(decode "$v");
        n=''
      fi
      n=${BASH_REMATCH[1]};
      v="${BASH_REMATCH[2]}";
    else
      err 1 "unknown $line"
    fi
  done

  if [[ -n $ark ]]; then
    anvl[ark]=$ark;    # Allow specification of bad arks
  fi

  if [[ -n $n ]]; then
    anvl[$n]=$(decode "$v");
    n=''
  fi

  # Now print the output
  local row
  if [[ -n $array ]]; then
    declare -p anvl
  elif [[ -n $csv ]]; then
   local row
    local i
    for i in "${csv[@]}"; do
      row+=,$(to_csv "${anvl[$i]}")
    done
    echo ${row:1}
  fi
}


: <<='cut'

=head2 ARGS_TO_ANVL

   ezid args_to_anvl [anvl parameters]

C<ezid args_to_anvl> reads passed parameters as set of items to
include in an ANVL file, and output that ANVL file to stdout.  In
keeping with ANVL format, arguments are delinated into key:value pairs
using the colon C<:>.  Like normal ANVL, if you want a colon as part
of your key, then that needs to be escaped.  The actual values
themselves will be verified and also escaped if they need to be.

  # This is a simple example for two parameters
  ezid args_to_anvl erc.who:Quinn erc.what:Eskimo

  #This example shows that value escaping is a thing.
  ./ezid args_to_anvl erc.who:Quinn erc.what:Eskimo where:$'The\nfrozen\north'

=cut

function args_to_anvl() {
  local nv='^([^:]+)[ \t]*:[ \t]*(.*)$'
  local n
  local v

  declare -A update

	while [[ -n $1 ]]; do
	  case $1 in
	    -- ) shift; break;;
	    *)
        if [[ $1 =~ $nv ]]; then
          n=${BASH_REMATCH[1]};
          v="${BASH_REMATCH[2]}";
          update[$n]=$(decode "$v");
        else
          log rest $1
          err 1 "Bad Option:" $1
        fi
        shift;;
    esac
  done

  local inp
  # if [[ ! -t 0 ]]; then
  #   inp=$(anvl -A)
  #   eval "declare -A inp_anvl=${inp#*=}"
  #   for n in ${!inp_anvl[@]}; do
  #     update[$n]=${inp_anvl[$n]};
  #   done
  # fi

  local anvl=$(array_to_anvl "$(declare -p update)")
  echo "$anvl"
}



: <<='cut'

=head2 ARRAY_TO_ANVL

   ezid array_to_anvl "$(declare -p foo)"

C<ezid array_to_anvl> reads a bash associated array as the mand
outputs ANVL formatted data from C<stdin> and reformats it as an ANVL
file.  This is typically a debug function, but could be used in script
environment to mint values for example, where the output of this file
is piped to the stdin for a C<ezid mint> command.

  # This example converts a simple ANVL file to a bash array
  declare -A foo;
  foo[erc.who]=Quinn
  foo[erc.what]=Eskimo
  ezid array_to_anvl "$(declare -p foo)"

=cut

function array_to_anvl() {
  eval "declare -A anvl="${1#*=}
  for n in ${!anvl[@]}; do
    echo $(encode "$n"): $(encode "${anvl[$n]}")
  done
}

: <<='cut'

=head2 GET

ezid I<options> B<get> [--array] [--csv=I<columns>] [--header] ARK(s)

B<ezid get> retrieves existing ARKS from the ezid server, and displays them
either as anvl (default), csv or as a bash array for evaluation. The CSV format
is most suitable for retrieving multiple arks.

=head3 GET OPTIONS

=over 4

=item B<--csv=I<columns>>

You can specify the columns that you would like to retrieve using this
parameter. Somewhat following anvl conventions, the column names are B<:>
delimited. This is a convenient way to create a table from a list of ARKs.

=item B<--header>

When specifing a I<--csv> command, this will include a header on the first row
of the output.

=item B<--array>

This will output a bash style associative array from a given ARK, where each key
of the array is a key of the retrieved ANVL format. these can be C<eval>ed for
use later in a bash script. For example the command C<eval \$(./ezid get --array
ark:/87287/d7q30n); echo \${anvl[_target]}>

=back

=cut

function get () {
  local opts=`getopt -o c:hA --long csv:,header,array -n 'ezid get' -- "$@"`
  if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

  eval set -- "$opts"

  local header
  local csv=''
  local array=''
  while true; do
	  case $1 in
      -A | --array ) array='-A'; shift;;
      -c | --csv ) csv="$2"; shift 2;;
      -h | --header )
        header=1;
        shift;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  local i
  local arr;
  local header_str
  if [[ -n "$csv" && -n "$header" ]]; then
    echo ${csv//:/,}
  fi

  [[ -n $csv ]] && csv="--csv=$csv"

  for i in $@; do
    if [[ -z $csv && -z $array ]]; then
      _http GET https://ezid.cdlib.org/id/$(fq $i)
    else
      local resp=$(_http --print=b GET https://ezid.cdlib.org/id/$(fq $i))
      anvl $csv $array --ark="$i" <<<$resp;
    fi
  done
}

:<<=cut

=head2 LOGIN

  ezid login --auth=USER[:PASS]

B<ezid login> is a simple wrapper around the B<httpie --auth=USER:PASS> command.
This allows users to setup their basic authorization, which is then stored in
the standard httpie session paratmeters. It is possible to maintain multiple users,
via the ezid I<--session> parameter to maintain different users, eg.

  ezid --session=ucd-legacy --auth=ucd-legacy

After which the session C<ucd-legacy>, will be set as a new httpie session, with
the saved authorization.

=head3 LOGIN OPTIONS

=over 4

=item B<-a|--auth=USER[:PASS]>

You specify the basic authentication for the ezid.cdlib.org server. If you only
specify the USER, then you are prompted for the password.

=back

=cut

function login() {
    local opts=`getopt -o a --long auth: -n 'ezid login' -- "$@"`
    if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    local auth=

    while true; do
	    case $1 in
        -a | --auth ) auth=$2; shift 2;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done
   _http --auth=${auth} https://ezid.cdlib.org/login
}

: <<=cut
=head2 MINT

  ezid [global_options] mint [--verify] [--proxy=proxy_server] [key:value] [key:value] ...

C<ezid mint> creates mints a new ark, under the specified C<--base> with the
passed C<key:value> pairs. The output of the mint command can be specified using
C<--csv> or C<--array>, just as with the L</"GET"> command. Specifing a
C<--proxy> will create another request, where the C<_target:> key for the ark
will be set to a local proxy.

C<ezid mint> uses both the C<--session> option and C<--base> options to specify
authorization, and the base to mint the ark.

  ezid --session=ezid --base=ark://99999/fk4 mint erc.who:Quinn erc.what:'The Eskimo'

Please note that by default, I<unlike the ezid service>, all arks are created
with the specification C<_status:reserved>. You can change that behavior by
including the _status as one of the C<key:value> pairs.

=head3 MINT OPTIONS

=over 4

=item B<--proxy=proxy_server>

Setting this parameter will cause the mint function, to perform an immediate
L</"UPDATE"> where the target key value pair will be specified as
C<_target:{proxy_server}{ark}>, the concatentation of the

  ezid mint --proxy=https://ark.foo.edu/ -verify erc.who:Quinn erc.what:Eskimo
    ./ezid mint --proxy=https://ark.foo.edu/ --verify erc.who:Quinn erc.what:Eskimo

responds with:

    success: ark:/99999/fk4qf9zb42
    _updated: 1555441448
    _target: https://ark.foo.edu/ark:/99999/fk4qf9zb42
    erc.who: Quinn
    _profile: erc
    _export: yes
    _owner: ucd-legacy
    _ownergroup: ucd-library
    _created: 1555441448
    _status: reserved
    erc.what: Eskimo


=item B<--verify>

After creating the ark, will L</"GET"> the ark to verify it was created. This
will also output the record ANVL format, unless another option C<--array> or
C<--csv> is specified.

=item B<--csv=I<columns>> | =item B<--array>

See L</GET> for output options.

=back

=cut

function mint() {
    local opts=`getopt -o p:c:vA --long proxy:,csv:,array,verify -n 'ezid mint' -- "$@"`
    if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    local proxy=
    local csv
    local array
    local verify

    while true; do
	    case $1 in
        --proxy ) proxy=$2; shift 2;;
        -c | --csv ) csv="--csv=$2"; shift 2;;
        -v | --verify) verify=1; shift ;;
        -A | --array ) array='--array'; shift ;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

    local anvl=$(args_to_anvl "$POST" "$@")
    local resp=$(_http --print=b POST https://ezid.cdlib.org/shoulder/${BASE[base]} Content-Type:text/plain <<<"$anvl")
    resp=$(anvl -A <<<$resp);
    eval "declare -A anvl="${resp#*=}
    if [[ -z ${anvl[success]} ]]; then
      err 1 "No success: $resp"
    fi
    local ark=${anvl[success]}
    if [[ -n $proxy && -n ${ark} ]]; then
      #sleep 1;
      update --ark=${ark} _target:${proxy}${ark}
    fi
    if [[ -n $verify || -n $csv || -n $array ]]; then
      get $csv $array $ark
    else
      echo $ark
    fi
}

: <<='cut'

=head2 UPDATE

  ezid [global_options] update --ark=ark [--verify] [--proxy=proxy_server] [key:value] [key:value] ...

C<ezid update> updates and existing ark by overwriting any of the passed
C<key:value> pairs. An existing C<--ark> is required, otherwise the function
works exactly as the L</"MINT"> command. Please see L</"MINT"> on usage.

=head3 UPDATE OPTIONS

=over 4

=item B<--ark=ark>

Specify the ark to update.

=item B<--csv=I<columns>> | B<--array> | B<--verify>

See L</MINT> for output options.

=back

=cut

function update() {
  local opts=`getopt -o c:Ava: --long csv:,array,verify,ark: -n 'ezid update' -- "$@"`
  if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

  eval set -- "$opts"

  local csv
  local array
  local verify
	local ark_in

  while true; do
	  case $1 in
      -a | --ark ) ark_in="$2"; shift 2;;
      -c | --csv ) csv="--csv=$2"; shift 2;;
      -v | --verify) verify=1; shift ;;
      -A | --array ) array='--array'; shift ;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

	[[ -z $ark_in ]] && err 'Required --ark parmeter not specified.'
  local ark=https://ezid.cdlib.org/id/$(fq $ark_in)
	[[ $? != 0 ]] && err 1 '$ark_in is not a valid ark';

  local anvl=$(args_to_anvl "$@")

  local resp=$(_http --print=b POST $ark Content-Type:text/plain <<<"$anvl")
  local rarr=$(anvl -A <<<$resp);
  eval "declare -A anvl="${rarr#*=}
  if [[ -z ${anvl[success]} ]]; then
    err 1 "No success: $resp"
  fi
  local suc=${anvl[success]}
  if [[ -n $verify || -n $csv || -n $array ]]; then
    get $csv $array $ark_in
  fi
}

: <<=cut

=head2 DELETE

  ezid I<options> delete [ARK(s)]

B<ezid delete> deletes existing ARKS from the ezid server, if their current
status is C<reserved>.

=cut

function delete () {
  for i in $@; do
    local resp=$(_http --print=b DELETE https://ezid.cdlib.org/id/$(fq $i))
    resp=$(anvl -A <<<$resp);
    eval "declare -A anvl="${resp#*=}
    if [[ -z ${anvl[success]} ]]; then
      err 1 "No success: $resp"
    fi
    echo ${anvl[success]}
  done
}

function encode() {
  # urlencode <string>
  old_lc_collate=$LC_COLLATE
  LC_COLLATE=C

  local length="${#1}"
  for (( i = 0; i < length; i++ )); do
    local c="${1:i:1}"
    case $c in
      [%:$'\n'$'\r'] ) printf '%%%02X' "'$c" ;;
      * ) printf "$c" ;;
# THis is URL encoding
#      [a-zA-Z0-9.~_-]) printf "$c" ;;   # This is URL encoding
#      *) printf '%%%02X' "'$c" ;;
esac
done

  LC_COLLATE=$old_lc_collate
}

function decode() {
  # urldecode <string>

  local url_encoded="${1//+/ }"
  printf '%b' "${url_encoded//%/\\x}"
}

# There are a number of ways to make the ark:
# 1: Fully qualified ark:/?????/???.* => return ark
#
function parse_base() {
  if [[ ${BASE[in]} =~ ^(ark:/)?([0-9][0-9][0-9][0-9][0-9]/)([a-z]*[0-9])$ ]]; then
    BASE[scheme]=${BASH_REMATCH[1]};
    BASE[naan]=${BASH_REMATCH[2]};
    BASE[shoulder]=${BASH_REMATCH[3]};
    BASE[base]=${BASE[scheme]}${BASE[naan]}${BASE[shoulder]}
  else
    log "--base=${BASE[in]} invalid base"
    exit 1
  fi
}

function _http () {
  local stdinp=
  local http="http --check-status --ssl=${EZID[http_ssl]} --session=${EZID[http_session]} --print=${EZID[http_print]}"
  if [[ $1 == '-n' || -n ${EZID[noop]} ]]; then
    [[ $1 == '-n' ]] && shift
    if [[ ! -t 0 ]]; then
      IFS='' read -r -d '' stdinp;
      log "$http $@ <<<$(printf "%q" "$stdinp")"
    else
      log "$http $@"
    fi
  else
    if [[ ! -t 0 ]]; then
      IFS='' read -r -d '' stdinp;
      $http $@  <<<"$stdinp"
    else
      $http $@
    fi
  fi
}

function to_csv() {
  local csv=$1;
  if [[ $csv =~ [,\"$'\n'] ]]; then
    csv=$(sed -e 's/"/""/g' <<<$1)
    echo "\"$csv\""
  else
    echo $csv
  fi
}


# : <<=cut
# =pod

# =head2 ezid I<[options]> declare

# The declare command will print a bash style, declare statement for each passed ARK.

# =cut

# function _declare () {
#   for i in $@; do
#     log D $i;
#     fq_ark $i > /dev/null;
#     declare -p ARK
#   done
# }



: <<=cut
=pod

=head1 SCRIPTING

=head2 CSV SCRIPTING

Scripting with CSV files can be hard, if you are trying to parse complicated csv
files. So a good method of scripting with csv files is to use another tool. For
example, the L<csvtool|https://colin.maudry.com/csvtool-manual-page/> is a nice
tool for scripting on csv files. C<csvtool> allows you to call a script on each
row of a csv file, passing the values as positional parameters. You can make a
small wrapper script to translate these positional parameters to key:value
pairs, and then run the tool over a csv file to create or update files.

For example, assume you have a csv file, C<in.csv> like this:

    who,what,more
    Quinn,The Eskimo,Bob Dylan
    Sloopy,Hang on,The McCoys

You can create a small script file, C<mint.sh> that looks like this:

     # /bin/bash
     base=ark:/99999/fk4
     proxy=https://digital.ucdavis.edu/
     cols=success:_target:erc.who:erc.what
     ezid --base=${base} mint --proxy=${proxy} --csv=${cols} erc.who:"$1" erc.what:"$2"

Then you can mint arks, and save the minted arks back to a csv file like this.
The example shows how you might use ~csvtool~ to select only a set of columns.
In practive, the little wrapper script can be a good place to add constants, or
manipulate the columns before sending them off to ezid.

    csvtool namedcol who,what in.csv |\
    head | tail -n +2 | csvtool call ./mint.sh - | tee out.csv

With the following results:

    ark:/99999/fk4qc17z06,https://digital.ucdavis.edu/ark:/99999/fk4qc17z06,Quinn,The Eskimo
    ark:/99999/fk4km0j474,https://digital.ucdavis.edu/ark:/99999/fk4km0j474,Sloopy,Hang on

=head1 AUTHOR

Quinn Hart <qjhart@ucdavis.edu>

=cut


#MAIN
# global Variables
declare -A BASE=([in]='ark:/99999/fk4');
declare -A ARK;
declare POST=$'_status:reserved';
declare -A EZID=([noop]=''
                 [http_ssl]="tls1.2"
                 [http_print]="b"
                 [http_session]="ezid");


while true; do
	case $1 in
	  -*) OPTS=($1); shift ;;
	  -- ) shift; break;;
	  *) break;
	esac
done

init $OPTS
main.cmd "$@"

exit 0;
